# NPO予算管理システム「ながいく」- AI開発ガイドライン

## 🎯 プロジェクト概要
NPO法人「ながいく」のための予算管理システム。freee会計のCSVから取引データを取得し、助成金ごとの予算項目に割り当て、レポートを作成する。
将来的には、freee会計APIから取引データを取得するようにする。

## 🏗️ システム構成

### 技術スタック
- **フロントエンド**: Next.js 14 (App Router) + TypeScript + AG-Grid Community + Tailwind CSS
- **バックエンド**: FastAPI + Python 3.12+ + PostgreSQL + SQLAlchemy
- **デプロイ**: VPS (160.251.170.97) + systemd サービス

### 環境とポート
- **本番環境**: フロントエンド:3000, バックエンド:8000 (systemdサービス管理)
- **開発環境**: フロントエンド:3001, バックエンド:8001
- **外部アクセス**: `npm run dev -- -H 0.0.0.0 -p 3001` で起動必須

### ディレクトリ構造
```
nagaiku-budget/
├── frontend/               # Next.js (TypeScript)
│   ├── src/
│   │   ├── app/           # App Router pages
│   │   ├── components/    # React components
│   │   └── lib/           # API通信など
├── backend/               # FastAPI (Python)
│   ├── main.py           # メインアプリケーション
│   ├── database.py       # DB設定
│   ├── schemas.py        # Pydanticスキーマ
│   └── freee_service.py  # freee API連携
├── data/                 # PostgreSQL データ
└── start_*.sh           # 開発用起動スクリプト
```

## 🛠️ 開発ルール

### 開発環境での作業方針
- **ファイル操作優先**: 開発環境ではCursorのファイル操作ツールを最大活用
- **ターミナル最小化**: ファイル編集・作成・削除はターミナルコマンドを使わない
- **並行処理**: 複数ファイル操作は同時実行で効率化
- **適切なツール選択**: `edit_file`, `search_replace`, `read_file`を状況に応じて使い分け

### 依存関係管理
- **メジャーアップデート慎重対応**: Next.js, React, TypeScript等のメジャーバージョンアップは慎重に実施
- **事前調査必須**: 破壊的変更の調査、移行ガイドの確認、影響範囲の特定
- **段階的実施**: 開発環境での検証、バックアップ作成、段階的な移行
- **ユーザー相談**: メジャーアップデート前は必ずユーザーと相談・承認
- **日常更新**: パッチ/マイナーアップデートは通常通り実施

### コード品質
- **TypeScript**: strictモード使用、型注釈必須
- **Python**: FastAPI + Pydantic + SQLAlchemy パターン遵守
- **CSS**: Tailwind CSS使用、インライン可、utility-firstアプローチ
- **データ処理**: AG-Grid Community機能を最大活用

### API設計
- **バックエンド**: RESTful API、FastAPIのauto-documentation活用
- **エラーハンドリング**: HTTPExceptionで適切なステータスコード返却
- **バリデーション**: Pydanticスキーマで厳密なデータ検証

### データベース
- **ORM**: SQLAlchemy 2.0 async/await パターン使用
- **マイグレーション**: 手動SQL実行（Alembic未使用）
- **主要テーブル**: transactions, budget_items, grants, allocations

### フロントエンド実装
- **状態管理**: React hooksベース、グローバル状態は最小限
- **AG-Grid**: Community版機能内で実装、Enterprise機能は使用禁止
- **ファイル処理**: React Dropzone使用、CSV取込機能重要
- **UI/UX**: レスポンシブ対応、ダークモード考慮不要

## 🚀 デプロイメント

### 本番環境管理
- **systemdサービス**: `sudo systemctl start/stop/status nagaiku-budget-*`
- **ログ確認**: `sudo journalctl -u [service-name] -f`
- **IPアドレス**: 160.251.170.97 (本番環境)

### 開発環境起動
- **フロントエンド**: `npm run dev -- -H 0.0.0.0 -p 3001`
- **バックエンド**: `./restart_backend.sh` または手動uvicorn起動
- **データベース**: PostgreSQL (ユーザー: nagaiku_user)

### 重要な制約
- **本番環境保護**: ポート8000は本番環境 - 絶対に触らない
- **開発環境**: ポート8001で開発、本番環境から完全分離
- **外部アクセス**: 必ず `-H 0.0.0.0` フラグ使用

## 📊 主要機能

### freee API連携
- **OAuth2認証**: freee会計APIから直接データ取得
- **増分同期**: 重複チェック機能付き
- **エラーハンドリング**: API制限・認証エラー対応

### 取引管理
- **CSV取込**: freeeエクスポート形式対応
- **予算割当**: 個別編集モード・一括選択モード
- **フィルター**: 複数条件・設定保存・再利用機能
- **リアルタイム集計**: 勘定科目別・部門別・予算項目別

### レポート機能
- **クロス集計**: 予算項目×月のマトリクス表示
- **CSVエクスポート**: フィルター適用結果の出力
- **サマリーパネル**: 選択データの即座集計表示

## 🔧 トラブルシューティング

### よくある問題
1. **外部アクセス不可**: `-H 0.0.0.0` フラグ確認
2. **ポート競合**: `pgrep -fl "next"` でプロセス確認
3. **バックエンド接続失敗**: ポート8001/8002使用確認
4. **データベース接続**: 環境変数ファイル (.env.development/.env.production) 確認

### デバッグコマンド
- **ポート確認**: `ss -tlnp | grep [port]`
- **プロセス確認**: `pgrep -fl [process_name]`
- **ログ確認**: `tail -f backend/uvicorn.log`

## 🎯 AI判断指針

### コード修正時
1. **型安全性**: TypeScript/Pydanticの型制約を厳守
2. **パフォーマンス**: AG-Grid Community版制限内で最適化
3. **エラーハンドリング**: ユーザーフレンドリーなメッセージ
4. **データ整合性**: 取引データの重複・欠損チェック

### 新機能開発時
1. **既存パターン踏襲**: 同様機能の実装方法を参考
2. **データベース変更**: スキーマ変更は慎重に、既存データ考慮
3. **API設計**: RESTful設計、適切なHTTPメソッド使用
4. **依存関係**: 新パッケージ追加時は既存バージョンとの互換性確認
5. **メジャーアップデート**: 事前調査・ユーザー相談・段階的検証を実施
6. **テスト**: 小さな変更でも動作確認必須

### 緊急対応時
1. **本番環境**: systemdサービス経由でのみ操作、ユーザー承認必須
2. **開発環境**: ポート8001使用、本番環境(8000)は絶対に触らない
3. **データバックアップ**: 重要変更前に必ずバックアップ確認
4. **本番操作**: AIは本番環境への操作を提案する前に必ず警告表示
5. **root権限必要時**: AIは操作手順を説明し、ユーザーの実行を依頼

### ドキュメント参照
- システム詳細: `docs/SYSTEM_SPECIFICATION.md`
- デプロイ手順: `docs/DEPLOY_GUIDE.md`
- 改善提案: `docs/IMPROVEMENT_PROPOSALS.md`
- 開発メモ: `docs/AI_DEVELOPMENT_LOG.md`

## ⚠️ 本番環境操作に関する厳重注意

### 本番環境の識別
- **IPアドレス**: 160.251.170.97
- **ポート**: フロントエンド3000、バックエンド8000
- **管理方法**: systemdサービス (nagaiku-budget-frontend, nagaiku-budget-backend)

### 本番環境操作の原則
1. **事前承認**: 本番環境への操作は必ずユーザーの明示的承認を得る
2. **操作制限**: systemdサービス経由のみ、直接プロセス操作禁止
3. **バックアップ**: データ変更前に必ずバックアップ状況確認
4. **ログ記録**: 操作前後のログ確認を必須とする
5. **警告表示**: AI は本番操作提案時に明確な警告を表示
6. **root権限操作**: AIは root権限が必要な操作を実行せず、ユーザーに依頼する

### 本番環境で禁止される操作
- ポート8000への直接アクセス・変更
- systemd以外の方法でのサービス制御
- データベースの直接変更（バックアップなし）
- 設定ファイルの直接編集

### AI の権限制限
- **sudo操作禁止**: AIは `sudo` コマンドを実行しない
- **systemd操作**: `sudo systemctl` が必要な場合はユーザーに依頼
- **root権限ファイル**: `/root/` 配下のファイル操作はユーザーが実行
- **権限エラー**: Permission denied が発生した場合は、ユーザーに操作を依頼

### AI の操作優先順位
- **ファイル操作**: Cursorのツール(`edit_file`, `read_file`, `search_replace`)を優先使用
- **ターミナル使用制限**: ファイル編集・作成・削除はCursorツールで実行
- **ターミナル適用場面**: サーバー起動・停止、パッケージインストール、プロセス確認のみ
- **効率重視**: 複数ファイル操作は並行実行、ターミナルは最小限

## 💡 その他の重要事項
- **freee API制限**: レート制限とOAuth認証の管理
- **CSV形式**: freeeエクスポート形式の変更に注意
- **AG-Grid制限**: Community版のみ使用、Enterprise機能は実装不可
- **依存関係の安全性**: メジャーアップデートは事前調査と段階的検証で実施
- **外部アクセス**: 必ず0.0.0.0でバインド、localhost不可 